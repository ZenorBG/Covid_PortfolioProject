/* Creating the first table */

CREATE TABLE  CovidDeaths (
	iso_code VARCHAR(10),
	continent VARCHAR(15),
	location VARCHAR(50),
	date DATE,
	population BIGINT,
	total_cases INT,
	new_cases INT,
	new_cases_smoothed DOUBLE PRECISION,
	total_deaths INT,
	new_deaths INT,
	new_deaths_smoothed DOUBLE PRECISION,
	total_cases_per_million DOUBLE PRECISION,
	new_cases_per_million DOUBLE PRECISION,
	new_cases_smoothed_per_million DOUBLE PRECISION,
	total_deaths_per_million DOUBLE PRECISION,
	new_deaths_per_million DOUBLE PRECISION,
	new_deaths_smoothed_per_million DOUBLE PRECISION,
	reproduction_rate DOUBLE PRECISION,
	icu_patients INT,
	icu_patients_per_million DOUBLE PRECISION,
	hosp_patients INT,
	hosp_patients_per_million DOUBLE PRECISION,
	weekly_icu_admissions DOUBLE PRECISION,
	weekly_icu_admissions_per_million DOUBLE PRECISION,
	weekly_hosp_admissions DOUBLE PRECISION,
	weekly_hosp_admissions_per_million DOUBLE PRECISION
);

/* Importing data */

COPY CovidDeaths
FROM '***\CovidDeaths.csv'
DELIMITER ','
CSV HEADER;

/* Creating the second table */

CREATE TABLE  CovidVaccinations (
	iso_code VARCHAR(10),
	continent VARCHAR(15),
	location VARCHAR(50),
	date DATE,
	new_tests INT,
	total_tests INT,
	total_tests_per_thousand DOUBLE PRECISION,
	new_tests_per_thousand DOUBLE PRECISION,
	new_tests_smoothed INT,
	new_tests_smoothed_per_thousand DOUBLE PRECISION,
	positive_rate DOUBLE PRECISION,
	tests_per_case DOUBLE PRECISION,
	tests_units VARCHAR(50),
	total_vaccinations INT,
	people_vaccinated INT,
	people_fully_vaccinated INT,
	new_vaccinations INT,
	new_vaccinations_smoothed INT,
	total_vaccinations_per_hundred DOUBLE PRECISION,
	people_vaccinated_per_hundred DOUBLE PRECISION,
	people_fully_vaccinated_per_hundred DOUBLE PRECISION,
	new_vaccinations_smoothed_per_million DOUBLE PRECISION,
	stringency_index DOUBLE PRECISION,
	population_density DOUBLE PRECISION,
	median_age DOUBLE PRECISION,
	aged_65_older DOUBLE PRECISION,
	aged_70_older DOUBLE PRECISION,
	gdp_per_capita DOUBLE PRECISION,
	extreme_poverty DOUBLE PRECISION,
	cardiovasc_death_rate DOUBLE PRECISION,
	diabetes_prevalence DOUBLE PRECISION,
	female_smokers DOUBLE PRECISION,
	male_smokers DOUBLE PRECISION,
	handwashing_facilities DOUBLE PRECISION,
	hospital_beds_per_thousand DOUBLE PRECISION,
	life_expectancy DOUBLE PRECISION,
	human_development_index DOUBLE PRECISION
);

/* Importing data */

COPY CovidVaccinations
FROM '***\CovidVaccinations.csv'
DELIMITER ','
CSV HEADER;

/* Data exploration */

SELECT location,
	date,
	total_cases,
	new_cases,
	total_deaths,
	population
FROM CovidDeaths
ORDER BY 1, 2;

/* Total Cases vs Total Deaths (USA) */

SELECT location,
	date,
	total_cases,
	total_deaths,
	ROUND( (total_deaths::NUMERIC / total_cases::NUMERIC) * 100, 3) AS death_percentage
FROM CovidDeaths
WHERE location LIKE '%States%'
ORDER BY 1, 2;

/* Total Cases vs Population (USA) */

SELECT location,
	date,
	total_cases,
	population,
	ROUND( (total_deaths::NUMERIC / population::NUMERIC) * 100, 3) AS infection_percentage
FROM CovidDeaths
WHERE location LIKE '%States%'
ORDER BY 1, 2;

/* Countries with highest infection rate compared to population */

SELECT location,
	population,
	MAX(total_cases) AS total_cases,
	COALESCE( ROUND( MAX(total_cases::NUMERIC / population::NUMERIC) * 100, 3), 0) AS infection_percentage
FROM CovidDeaths
GROUP BY location,
	population
ORDER BY infection_percentage DESC;

/* Countries with highest death count per population */

SELECT location,
	COALESCE( MAX(total_deaths), 0) AS total_deaths
FROM CovidDeaths
WHERE continent IS NOT NULL
GROUP BY location
ORDER BY total_deaths DESC;

/* Locations with highest death count (for the purpose of the exercise) */

WITH Location_deaths AS (
SELECT
	location,
	CASE
		WHEN location LIKE '%America' THEN 'Americas'
		ELSE location
	END AS new_location,
	COALESCE( MAX(total_deaths), 0) AS total_deaths
FROM CovidDeaths
WHERE continent IS NULL
GROUP BY location, new_location
)

SELECT new_location,
	SUM(total_deaths) AS total_deaths
FROM Location_deaths
GROUP BY new_location
ORDER BY total_deaths DESC;

/* Global overview */

SELECT date,
	SUM(new_cases) AS total_cases,
	SUM(new_deaths) AS total_deaths,
	ROUND( SUM(new_deaths)::NUMERIC / SUM( CAST(new_cases AS NUMERIC)), 3) * 100 AS death_percentage
FROM CovidDeaths
WHERE continent IS NOT NULL
GROUP BY date
ORDER BY date

/* Joining vaccination and death tables (CTE) */

WITH pop_vs_vac AS (
SELECT dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations,
	SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM CovidDeaths AS dea
INNER JOIN CovidVaccinations AS vac
	ON dea.location = vac.location
	AND  dea.date = vac.date
WHERE dea.continent IS NOT NULL
GROUP BY dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations
ORDER BY 2, 3
)

SELECT *,
	ROUND( (rolling_vaccinations::NUMERIC / population::NUMERIC ) * 100, 3) AS percent_rolling_vaccations
FROM pop_vs_vac

/* Joining vaccination and death tables (TEMP TABLE) */

CREATE TEMPORARY TABLE temp_pop_vs_vac AS (
SELECT dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations,
	SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM CovidDeaths AS dea
INNER JOIN CovidVaccinations AS vac
	ON dea.location = vac.location
	AND  dea.date = vac.date
WHERE dea.continent IS NOT NULL
GROUP BY dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations
ORDER BY 2, 3
)

/* Joining vaccination and death tables (VIEW) */

CREATE VIEW view_pop_vs_vac AS (
SELECT dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations,
	SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM CovidDeaths AS dea
INNER JOIN CovidVaccinations AS vac
	ON dea.location = vac.location
	AND  dea.date = vac.date
WHERE dea.continent IS NOT NULL
GROUP BY dea.continent,
	dea.location,
	dea.date,
	dea.population,
	vac.new_vaccinations
ORDER BY 2, 3
)